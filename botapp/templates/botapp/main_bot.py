import io
import logging
import asyncio
import os

import django
from aiogram.types.input_file import FSInputFile
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from aiogram.types import InputMediaAudio, InputMediaPhoto
from asgiref.sync import sync_to_async
from django.conf import settings

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'uncle_bot.settings')
django.setup()

from botapp.models import Album, Track  # –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–µ–π

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

TOKEN = "1689625811:AAHJ9ZRqy-oiPvI43d68HdWLc1awBj_T2I8"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ç–æ–∫–µ–Ω —Å–≤–æ–µ–≥–æ –±–æ—Ç–∞

bot = Bot(token=TOKEN)
dp = Dispatcher()

# Reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —ç–º–æ–¥–∑–∏
keyboard = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üéµ –ú—É–∑—ã–∫–∞"), KeyboardButton(text="üí∞ –î–æ–Ω–∞—Ç—ã")]
    ],
    resize_keyboard=True
)

@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëãüòä\n–Ø –º—É–∑—ã–∫–∞–ª—å–Ω—ã–π –î—è–¥—è–±–æ—Ç üéµ\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–ª—É—à–∞—Ç—å —Ç—Ä–µ–∫–∏ –≥—Ä—É–ø–ø—ã –î—è–¥–Ø.\n"
        "–í—ã–±–µ—Ä–∏ –æ–ø—Ü–∏—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞.",
        reply_markup=keyboard
    )

@dp.message(Command("help"))
async def cmd_help(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /help")
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/music ‚Äî –º—É–∑—ã–∫–∞\n"
        "/donate ‚Äî –¥–æ–Ω–∞—Ç—ã"
    )

@dp.message(lambda message: message.text in ["/music", "üéµ –ú—É–∑—ã–∫–∞"])
async def cmd_music(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /music –∏–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ú—É–∑—ã–∫–∞")

    albums = await sync_to_async(list)(Album.objects.all())
    if not albums:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª—å–±–æ–º–æ–≤.")
        return

    builder = InlineKeyboardBuilder()
    for album in albums:
        builder.button(
            text=f"üéµ {album.name}",
            callback_data=f"album_{album.id}"
        )
    builder.adjust(1)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª—å–±–æ–º:", reply_markup=builder.as_markup())

@dp.callback_query(lambda c: c.data and c.data.startswith('album_'))
async def process_album_callback(callback_query: types.CallbackQuery):
    album_id = int(callback_query.data.split('_')[1])
    album = await sync_to_async(Album.objects.filter(id=album_id).first)()
    if not album:
        await callback_query.message.answer("–ê–ª—å–±–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback_query.answer()
        return

    tracks = await sync_to_async(list)(album.tracks.order_by('id').all())
    if not tracks:
        await callback_query.message.answer("–í —ç—Ç–æ–º –∞–ª—å–±–æ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.")
        await callback_query.answer()
        return

    media = []

    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—É—Ç–∏ –∫ –æ–±–ª–æ–∂–∫–µ
    if album.cover and album.cover.name:
        cover_path = album.cover.path  # <-- –∑–¥–µ—Å—å –≤–∞–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å .path, –∞ –Ω–µ .url
        if os.path.isfile(cover_path):
            media.append(
                InputMediaPhoto(
                    media=FSInputFile(cover_path),
                    caption=f"–ì—Ä—É–∂—É –ê–ª—å–±–æ–º: {album.name}",
                    # has_spoiler=True  # –º–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –∫–µ—à–∞
                )
            )
        else:
            await callback_query.message.answer(f"–ê–ª—å–±–æ–º: {album.name}\n–û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {cover_path}")
    else:
        await callback_query.message.answer(f"–ê–ª—å–±–æ–º: {album.name}\n–û–±–ª–æ–∂–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    for track in tracks:
        if track.audio_file and os.path.exists(track.audio_file.path):
            media.append(
                InputMediaAudio(
                    media=FSInputFile(track.audio_file.path),
                    caption=track.title
                )
            )
        else:
            logger.warning(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {track.title}")

    MAX_MEDIA_PER_MSG = 10
    for i in range(0, len(media), MAX_MEDIA_PER_MSG):
        chunk = media[i:i + MAX_MEDIA_PER_MSG]
        await callback_query.message.answer_media_group(media=chunk)

    await callback_query.answer()

@dp.callback_query(lambda c: c.data == "back_to_albums")
async def back_to_albums(callback_query: types.CallbackQuery):
    albums = await sync_to_async(list)(Album.objects.all())
    builder = InlineKeyboardBuilder()
    for album in albums:
        builder.button(
            text=f"üéµ {album.name}",
            callback_data=f"album_{album.id}"
        )
    builder.adjust(1)

    await callback_query.message.edit_text("–ê–ª—å–±–æ–º:", reply_markup=builder.as_markup())
    await callback_query.answer()

@dp.message(Command("donate"))
async def cmd_donate(message: types.Message):
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /donate")
    await message.answer(
        "üí∞ –†–∞–∑–¥–µ–ª –î–æ–Ω–∞—Ç—ã:\n"
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! –í–æ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è, –∫–∞–∫ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–æ–Ω–∞—Ç."
    )

@dp.message()
async def log_user_info(message: types.Message):
    user = message.from_user
    user_id = user.id
    username = user.username or "–Ω–µ—Ç –Ω–∏–∫–Ω–µ–π–º–∞"
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID: {user_id}, –ù–∏–∫–Ω–µ–π–º: @{username}")

async def main():
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
