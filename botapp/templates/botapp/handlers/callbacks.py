import os
import asyncio
from aiogram import Router, types
from aiogram.types.input_file import FSInputFile
from aiogram.types import InputMediaAudio, InputMediaPhoto
from asgiref.sync import sync_to_async

from botapp.models import Album
from botapp.templates.botapp.config import logger
from botapp.templates.botapp.handlers.clear_chat import clear_chat
from botapp.templates.botapp.keyboards import settings_keyboard, keyboard
from botapp.templates.botapp.utils.message_utils import send_and_store
from botapp.templates.botapp.loader import sent_messages, bot

router = Router()
MAX_MEDIA_PER_MSG = 10

@router.callback_query(lambda c: c.data and c.data.startswith('album_'))
async def process_album_callback(callback_query: types.CallbackQuery):
    # –û—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "query is too old"
    await callback_query.answer()

    album_id = int(callback_query.data.split('_')[1])
    album = await sync_to_async(lambda: Album.objects.filter(id=album_id).first())()
    if not album:
        await send_and_store(callback_query.message.chat.id, "ü§∑‚Äç‚ôÇÔ∏è üìÄ –ê–ª—å–±–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    tracks = await sync_to_async(list)(album.tracks.order_by('id').all())
    if not tracks:
        await send_and_store(callback_query.message.chat.id, "üö´ –í —ç—Ç–æ–º –∞–ª—å–±–æ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.")
        return

    photos = []
    audios = []

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±–ª–æ–∂–∫—É –≤ —Ñ–æ—Ç–æ, –µ—Å–ª–∏ –µ—Å—Ç—å
    if album.cover and album.cover.name:
        cover_path = album.cover.path
        if os.path.isfile(cover_path):
            photos.append(
                InputMediaPhoto(
                    media=FSInputFile(cover_path),
                    caption=(
                        f"üìÄ –ê–ª—å–±–æ–º:\n{album.name}\n"
                        f"‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:\n{album.description}\n"
                        f"üìÖ –†–µ–ª–∏–∑: {album.release_date}\n"
                        f"–ê–≤—Ç–æ—Ä—ã: {album.authors}"
                    )
                )
            )
        else:
            await send_and_store(
                callback_query.message.chat.id,
                f"üìÄ –û—Ç–∫—Ä—ã–≤–∞—é –ê–ª—å–±–æ–º:\n ‚≠ê {album.name} ‚≠ê\nüñºÔ∏è –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {cover_path}"
            )
    else:
        await send_and_store(callback_query.message.chat.id, f"üìÄ –ê–ª—å–±–æ–º: {album.name}\nüñºÔ∏è –û–±–ª–æ–∂–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    # –î–æ–±–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —Ç—Ä–µ–∫–∏
    for track in tracks:
        if track.audio_file and os.path.exists(track.audio_file.path):
            audios.append(
                InputMediaAudio(
                    media=FSInputFile(track.audio_file.path),
                    caption=track.title
                )
            )
        else:
            logger.warning(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {track.title}")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ –≥—Ä—É–ø–ø–∞–º–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    if photos:
        for i in range(0, len(photos), MAX_MEDIA_PER_MSG):
            chunk = photos[i:i + MAX_MEDIA_PER_MSG]
            messages = await bot.send_media_group(callback_query.message.chat.id, media=chunk)
            for msg in messages:
                sent_messages.setdefault(callback_query.message.chat.id, []).append(msg.message_id)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ –≥—Ä—É–ø–ø–∞–º–∏ —Å protect_content=True –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏–π
    if audios:
        for i in range(0, len(audios), MAX_MEDIA_PER_MSG):
            chunk = audios[i:i + MAX_MEDIA_PER_MSG]
            messages = await bot.send_media_group(
                callback_query.message.chat.id,
                media=chunk,
                protect_content=True  # –ó–∞–ø—Ä–µ—Ç –ø–µ—Ä–µ—Å—ã–ª–∫–∏ –∞—É–¥–∏–æ
            )
            for msg in messages:
                sent_messages.setdefault(callback_query.message.chat.id, []).append(msg.message_id)


@router.message(lambda message: message.text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")
async def show_settings(message: types.Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    await send_and_store(message.chat.id, "–í—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö üõ†Ô∏è:", reply_markup=settings_keyboard)


@router.message(lambda message: message.text == "üßπ –ü–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
async def clear_chat_handler(message: types.Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    await send_and_store(message.chat.id, "–ß–∏—â—É —á–∞—Ç üßπ")

    async def clear_and_send_menu():
        await clear_chat(message.chat.id)
        await send_and_store(message.chat.id, "üö© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)

    asyncio.create_task(clear_and_send_menu())


@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: types.Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    await send_and_store(message.chat.id, "üö© –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=keyboard)
