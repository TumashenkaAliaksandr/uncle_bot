
import asyncio

from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup

from botapp.bot.handlers.clear_chat import clear_chat
from botapp.bot.keyboards import main_keyboard, albums_keyboard, donate_keyboard, settings_keyboard, \
    platforms_keyboard, news_keyboard, get_songs_keyboard
from botapp.bot.config import logger
from botapp.bot.texts.proposal_texts import thanks_donate_command_txt, HELLO_TXT_FIRST, sending_album_txt, \
    YOUR_SETTINGS_TXT, news_txt, DONATE_TEXT, tabs_txt, MAIN_MENU_ANSWER, cleaning_chat_txt, PLATFORMS_TEXT
from botapp.bot.utils.message_utils import send_and_store
from botapp.bot.loader import sent_messages

router = Router()

@router.message(Command("start"))
async def cmd_start(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª /start")
    await send_and_store(
        message.chat.id,
        HELLO_TXT_FIRST,
        parse_mode="HTML",
        reply_markup=main_keyboard
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /help")
    await send_and_store(
        message.chat.id,
        "‚ôªÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
        "/help ‚Äî –ø–æ–º–æ—â—å\n"
        "/music ‚Äî –º—É–∑—ã–∫–∞\n"
        "/donate ‚Äî –¥–æ–Ω–∞—Ç—ã"
    )

@router.message(F.text.in_({"/music", "üéµ –ú—É–∑—ã–∫–∞"}))
async def cmd_music(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /music –∏–ª–∏ –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É –ú—É–∑—ã–∫–∞")
    markup = await albums_keyboard()
    await send_and_store(message.chat.id, sending_album_txt, parse_mode="HTML", reply_markup=markup)

@router.message(Command("donate"))
async def cmd_donate(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /donate")
    await send_and_store(
        message.chat.id, thanks_donate_command_txt, parse_mode="HTML", reply_markup=donate_keyboard,
    )


@router.message(lambda message: message.text == "‚öôÔ∏è")
async def show_settings(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /settings")
    await send_and_store(
        message.chat.id, YOUR_SETTINGS_TXT, parse_mode="HTML", reply_markup=settings_keyboard,
    )

@router.message(lambda message: message.text == "üì∫ –í–∏–¥–µ–æ")
async def video_handler(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    await send_and_store(message.chat.id,"ü§∑‚Äç‚ôÇ –°–æ—Ä—è–Ω, –≤–∏–¥–æ—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç..")


@router.message(lambda message: message.text == "üì∞ –ù–æ–≤–æ—Å—Ç–∏")
async def news_command_handler(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª /news")
    keyboard_news_answers = await news_keyboard()
    sent_msg = await message.answer("üîî –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard_news_answers)
    sent_messages.setdefault(message.chat.id, []).append(sent_msg.message_id)


@router.message(lambda message: message.text == "üí∞ –î–æ–Ω–∞—Ç—ã")
async def donate_handler(message: Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    await send_and_store(
        message.chat.id,
        DONATE_TEXT,
        reply_markup=donate_keyboard,
        parse_mode="HTML"
    )



@router.message(lambda message: message.text == "üé∏ –¢–∞–±—ã")
async def tab_handler(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    keyboard = await get_songs_keyboard()
    await send_and_store(message.chat.id, tabs_txt, parse_mode="HTML", reply_markup=keyboard)

@router.message(lambda message: message.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    await send_and_store(message.chat.id, MAIN_MENU_ANSWER, parse_mode="HTML", reply_markup=main_keyboard)

@router.message(lambda message: message.text == "‚¨ÖÔ∏è")
async def back_to_main_menu(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    await send_and_store(message.chat.id, MAIN_MENU_ANSWER, parse_mode="HTML", reply_markup=main_keyboard)


@router.message(lambda message: message.text == "üßπ –ü–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
async def clear_chat_handler(message: Message):
    logger.info(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª üßπ –ü–æ—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    await send_and_store(message.chat.id, cleaning_chat_txt, parse_mode="HTML")

    async def clear_and_send_menu():
        logger.info(f"–ë–û–¢ {message.from_user.id} üßπ –ß–∏—Å—Ç–∏—Ç —á–∞—Ç")
        chat_id = message.chat.id

        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–ª —Ä–∞–Ω—å—à–µ –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        if chat_id in sent_messages:
            for msg_id in sent_messages[chat_id]:
                try:
                    await message.bot.delete_message(chat_id, msg_id)
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è {msg_id}: {e}")
            sent_messages[chat_id].clear()

        sent_msg = await send_and_store(chat_id, MAIN_MENU_ANSWER, parse_mode="HTML", reply_markup=main_keyboard)
        sent_messages.setdefault(chat_id, []).append(sent_msg.message_id)

    asyncio.create_task(clear_and_send_menu())



@router.message(lambda message: message.text == "üß¨ –ü–ª–∞—Ç—Ñ–æ—Ä–º—ã")
async def show_platforms(message: Message):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    await send_and_store(
        message.chat.id,
        PLATFORMS_TEXT,
        reply_markup=platforms_keyboard,
        parse_mode="HTML"
    )


@router.message(lambda message: message.text == "üì£ –ö–∞–Ω–∞–ª")
async def show_settings(message: Message):
    sent_messages.setdefault(message.chat.id, []).append(message.message_id)
    # –¢–µ–∫—Å—Ç —Å HTML-—Å—Å—ã–ª–∫–æ–π
    sing_answer_txt = (
        '<strong>–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º –∫–∞–Ω–∞–ª –î–Ø–î–Ø?</strong> üö∂ Àã¬∞‚Ä¢*‚ÅÄ‚û∑'
        '<a href="https://t.me/+M-LokUWMIaBmYTFi" target="_blank">–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ωa–ª</a>'
    )
    await send_and_store(
        message.chat.id,
        sing_answer_txt,
        parse_mode="HTML",
        reply_markup=main_keyboard
    )
