import logging
import os
import asyncio
from aiogram import Router, types
from aiogram.exceptions import TelegramEntityTooLarge
from aiogram.types.input_file import FSInputFile
from aiogram.types import InputMediaAudio, InputMediaPhoto
from asgiref.sync import sync_to_async
from botapp.models import Album
from botapp.bot.config import logger
from botapp.bot.keyboards import keyboard
from botapp.bot.texts.proposal_texts import nice_listening
from botapp.bot.utils.message_utils import send_and_store
from botapp.bot.loader import sent_messages, bot


logger = logging.getLogger(__name__)
router = Router()
MAX_MEDIA_PER_MSG = 5  # –ú–∞–∫—Å–∏–º—É–º —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –æ–¥–Ω–æ–π –º–µ–¥–∏–∞–≥—Ä—É–ø–ø–µ
sent_messages = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è ID –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
nice_listening = "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏—è!"  # –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∞–ª—å–±–æ–º–∞
keyboard = keyboard  # –ü–æ–¥—Å—Ç–∞–≤—å—Ç–µ —Å—é–¥–∞ –≤–∞—à—É –≥–ª–∞–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É



# –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –º–µ–¥–∏–∞–≥—Ä—É–ø–ø —Å —Ä–∞–∑–±–∏–µ–Ω–∏–µ–º –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
async def safe_send_media_group(bot, chat_id, media_chunks, **kwargs):
    for chunk in media_chunks:
        try:
            messages = await bot.send_media_group(chat_id=chat_id, media=chunk, **kwargs)
            for msg in messages:
                sent_messages.setdefault(chat_id, []).append(msg.message_id)
        except TelegramEntityTooLarge:
            # –ï—Å–ª–∏ —á–∞–Ω–∫ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –æ–¥–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
            for media in chunk:
                try:
                    single_msg = await bot.send_media_group(chat_id=chat_id, media=[media], **kwargs)
                    sent_messages.setdefault(chat_id, []).append(single_msg[0].message_id)
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏–∞: {e}")
        await asyncio.sleep(1)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —á–∞–Ω–∫–∞–º–∏


@router.callback_query(lambda c: c.data and c.data.startswith('album_'))
async def process_album_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()

    album_id = int(callback_query.data.split('_')[1])
    album = await sync_to_async(lambda: Album.objects.filter(id=album_id).first())()
    if not album:
        await send_and_store(callback_query.message.chat.id, "ü§∑‚Äç‚ôÇÔ∏è üìÄ –ê–ª—å–±–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    tracks = await sync_to_async(list)(album.tracks.order_by('id').all())
    if not tracks:
        await send_and_store(callback_query.message.chat.id, "üö´ –í —ç—Ç–æ–º –∞–ª—å–±–æ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç—Ä–µ–∫–æ–≤.")
        return

    photos = []
    audios = []

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±–ª–æ–∂–∫–∏
    if album.cover and album.cover.name:
        cover_path = album.cover.path
        if os.path.isfile(cover_path):
            photos.append(
                InputMediaPhoto(
                    media=FSInputFile(cover_path),
                    caption=(
                        f"üìÄ –ê–ª—å–±–æ–º:\n‚ú™ {album.name} ‚ú™\n\n"
                        f"‚úçÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ:\n{album.description}\n\n"
                        f"üìÖ –†–µ–ª–∏–∑: {album.release_date}\n"
                        f"ü¶∏üßô –ê–≤—Ç–æ—Ä—ã: {album.authors}"
                    )
                )
            )
        else:
            await send_and_store(
                callback_query.message.chat.id,
                f"üìÄ –û—Ç–∫—Ä—ã–≤–∞—é –ê–ª—å–±–æ–º:\n ‚≠ê {album.name} ‚≠ê\nüñºÔ∏è‚ùå –û–±–ª–æ–∂–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: {cover_path}"
            )
    else:
        await send_and_store(callback_query.message.chat.id, f"üìÄ –ê–ª—å–±–æ–º: {album.name}\nüñºÔ∏è‚ùå –û–±–ª–æ–∂–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ç—Ä–µ–∫–æ–≤
    for track in tracks:
        if track.audio_file and os.path.exists(track.audio_file.path):
            audios.append(
                InputMediaAudio(
                    caption=track.title,
                    media=FSInputFile(track.audio_file.path)
                )
            )
        else:
            logger.warning(f"‚ùåüéµ –ê—É–¥–∏–æ—Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç: {track.title}")

    # –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏
    photo_chunks = [photos[i:i + MAX_MEDIA_PER_MSG] for i in range(0, len(photos), MAX_MEDIA_PER_MSG)]
    audio_chunks = [audios[i:i + MAX_MEDIA_PER_MSG] for i in range(0, len(audios), MAX_MEDIA_PER_MSG)]

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —á–∞–Ω–∫–∞–º–∏
    if photos:
        await safe_send_media_group(bot, callback_query.message.chat.id, photo_chunks)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ —á–∞–Ω–∫–∞–º–∏ —Å –∑–∞—â–∏—Ç–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
    if audios:
        await safe_send_media_group(bot, callback_query.message.chat.id, audio_chunks, protect_content=True)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await send_and_store(callback_query.message.chat.id, nice_listening, parse_mode="HTML", reply_markup=keyboard)






